3-Tier
-> 어떠한 플랫폼을 3계층으로 나누어 별도의 논리적/물리적인 장치에서 구축 및 운영하는 형태
-> 3-Tier 아키텍처는 다중 계층 아키텍처에서 가장 널리 사용됨
-> 구성 : 단일 프레젠테이션 계층, 로직 계층, 데이터 계층

첫 번째 계층 [Presentation Tier(Client)]
-> 일반 사용자가 직접 엑세스 할 수 있는 프레젠테이션 계층
-> 콘텐츠를 HTML/JS/CSS 형식으로 브라우저에 전송하는 계층

-> 모든 HTTPS 지원 클라이언트 또는 장치와 통신할 수 있으므로 프레젠테이션 계층은 다양한 형식을 유연하게 수행 할 수 있음

두 번째 계층 [Logic Tier(Application)]
-> 비즈니스 로직이 실행되는 비즈니스 로직 계층
-> 어플리케이션 서버를 사용하고 어플리케이션에 대한 비즈니스 논리를 처리하는 계층

세 번째 계층 [Data Tier(Database)]
-> 데이터 스토리지 계층
-> 응용 프로그램 데이터에 대한 엑세스를 제공하는 데이터베이스 관리 시스템

** 3-Tier 아키텍처는 프론트엔드, 백엔드 그리고 각 계층에 특정 작업이 있으며 독립적으로 관리되는 데이터베이스같은 클라이언트 - 서버 어플리케이션을 실행하는데 사용됨

이점
어플리케이션을 3개의 계층으로 분리할 때 얻는 이점
1. 어플리케이션의  다른 영역에 영향을 주지 않고 한 계층의 기술 스택을 업데이트 할 수 있다.
2. 서로 다른 개발 팀이 각자의 전문 분야에 대해 작업할 수 있다.
3. 어플리케이션을 스케일업 및 스케일아웃 할 수 있다.
4. 서비스나 서버의 신뢰성과 독립성을 높여준다.
5. 프레젠테이션 코드와 비즈니스 로직을 별도로 관리하여 비즈니스 로직의 변경 등이 프레젠테이션 계층에 영향을 미치지 않는다.

* 스케일업 (Scale-Up) 
: 기존 서버의 사양을 업그레이드 해 시스템을 확장하는 것을 말한다.
: CPU나 RAM등을 추가하거나 고성능의 부품, 서버로 교환하는 방법이다.

* 스케일아웃 (Scale-Out)
: 서버를 여러 대 추가하여 시스템을 확장하는 것을 말한다.
: 서버가 여러 대로 나뉘기 때문에 각 서버에 걸리는 부하를 균등하게 해주는 '로드밸런싱'이 필수적으로 동반되어야 한다.

* 미들웨어
: 미들웨어는 양 쪽을 연결하여 데이터를 주고 받을 수  ㅣㅅ도록 중간에서 매개 역할을 하는 소프트웨어
  네트워크를 통해서 연결된 여러 개의 컴퓨터에 있는 많은 프로세스들에게 어떤 서비스를 사용할 수 있도록 연결해주는 소프트웨어를 말한다.
  3계층 클라이언트/서버 구조에서 미들웨어가 존재
  웹 브라우저에서 데이터베이스로부터 데이터를 저장하거나 읽어올 수 있게 중간에 미들웨어가 존재
