3-Tier
-> 어떠한 플랫폼을 3계층으로 나누어 별도의 논리적/물리적인 장치에서 구축 및 운영하는 형태
-> 3-Tier 아키텍처는 다중 계층 아키텍처에서 가장 널리 사용됨
-> 구성 : 단일 프레젠테이션 계층, 로직 계층, 데이터 계층

첫 번째 계층 [Presentation Tier(Client)]
-> 일반 사용자가 직접 엑세스 할 수 있는 프레젠테이션 계층
-> 콘텐츠를 HTML/JS/CSS 형식으로 브라우저에 전송하는 계층

-> 모든 HTTPS 지원 클라이언트 또는 장치와 통신할 수 있으므로 프레젠테이션 계층은 다양한 형식을 유연하게 수행 할 수 있음

두 번째 계층 [Logic Tier(Application)]
-> 비즈니스 로직이 실행되는 비즈니스 로직 계층
-> 어플리케이션 서버를 사용하고 어플리케이션에 대한 비즈니스 논리를 처리하는 계층

세 번째 계층 [Data Tier(Database)]
-> 데이터 스토리지 계층
-> 응용 프로그램 데이터에 대한 엑세스를 제공하는 데이터베이스 관리 시스템

** 3-Tier 아키텍처는 프론트엔드, 백엔드 그리고 각 계층에 특정 작업이 있으며 독립적으로 관리되는 데이터베이스같은 클라이언트 - 서버 어플리케이션을 실행하는데 사용됨

이점
어플리케이션을 3개의 계층으로 분리할 때 얻는 이점
1. 어플리케이션의  다른 영역에 영향을 주지 않고 한 계층의 기술 스택을 업데이트 할 수 있다.
2. 서로 다른 개발 팀이 각자의 전문 분야에 대해 작업할 수 있다.
3. 어플리케이션을 스케일업 및 스케일아웃 할 수 있다.
4. 서비스나 서버의 신뢰성과 독립성을 높여준다.
5. 프레젠테이션 코드와 비즈니스 로직을 별도로 관리하여 비즈니스 로직의 변경 등이 프레젠테이션 계층에 영향을 미치지 않는다.

* 스케일업 (Scale-Up) 
: 기존 서버의 사양을 업그레이드 해 시스템을 확장하는 것을 말한다.
: CPU나 RAM등을 추가하거나 고성능의 부품, 서버로 교환하는 방법이다.

* 스케일아웃 (Scale-Out)
: 서버를 여러 대 추가하여 시스템을 확장하는 것을 말한다.
: 서버가 여러 대로 나뉘기 때문에 각 서버에 걸리는 부하를 균등하게 해주는 '로드밸런싱'이 필수적으로 동반되어야 한다.

* 미들웨어
: 미들웨어는 양 쪽을 연결하여 데이터를 주고 받을 수  ㅣㅅ도록 중간에서 매개 역할을 하는 소프트웨어
  네트워크를 통해서 연결된 여러 개의 컴퓨터에 있는 많은 프로세스들에게 어떤 서비스를 사용할 수 있도록 연결해주는 소프트웨어를 말한다.
  3계층 클라이언트/서버 구조에서 미들웨어가 존재
  웹 브라우저에서 데이터베이스로부터 데이터를 저장하거나 읽어올 수 있게 중간에 미들웨어가 존재

HTTP(Hyper Text Transfer Protocol)
-> HTTP란 클라이언트와 서버가 서로 데이터를 주고받기 위해 사용되는 통신 규약 (클라이언트-서버 프로토콜)
-> 웹 문서 간에 링크를 통해 연결할 수 있는 프로토콜이며, 문서뿐 아니라 HTML이나 TEXT, 이미지, 음성, 영상, 파일, JSON, XML(API) 등 여러 종류의 데이터들을 폭 넓게 전송할 수 있음
-> 서버 간에 데이터를 주고 받을 때 대부분 HTTP라는 프로토콜을 사용해 통신
ex) http://www.naver.com 와 같이 시작하는 것은 www.naver.com 이라는 인터넷 주소가 가진 데이터 정보 등의 교환을 HTTP의 통신 규약대로 처리하라는 것을 의미한다고 볼 수 있음

HTTP의 통신구조
-> HTTP 통신은 클라이언트(Front-end)와 (Back-end)로 구성
-> 클라이언트가 요청(Request)을 하면 서버가 응답(Response) 하는 것
ex) 클라이언트는 HTTP 메시지를 만들어 보내고 서버에서 그 요청에 대한 응답이 올 때까지 기다림. 그리고 서버는 요청에 대한 결과를 만들어 응답.
클라이언트 (1. 요청) ------> 서버
         <------ (2. 응답)
-> 클리아언트와 서버를 분리하는 이유
: 각자의 역할에 집중할 수 있음. 분리함으로써 클라이언트에서는 복잡한 비즈니스 로직이나 데이터를 다룰 필요 없고 UI를 그리는데 집중
: 서버에서는 비즈니스 로직이나 데이터를 다루는 데에만 집중할 수 있음.

HTTP 의 특징
1. 무상태성 : 서버는 각각의 요청을 별개의 것으로 처리하며 이전 요청의 정보를 저장하지 않음 -> 서버의 부하를 줄이고 클라이언트와 서버 간의 통신을 단순화하여 처리 속도 향상시킴
2. 비연결성 : 요청과 응답이 한 번 이루어지면 연결을 끊음. 이전 요청과 응답의 정보를 유지하지 않기 때문에 서버 부하 줄일 수 있지만 새로운 연결을 맺는 데 드는 시간이 추가로 발생할 수 있음
3. 클라이언트 서버 구조 : Request / Response 구조로 통신. 클라이언트는 서버에 요청 - 서버는 클라이언트에 응답 > 요청과 응답은 HTTP 메시지라는 형식으로 주고 받음
4. HTTP is simple : 간단하고 사람이 읽기 쉽게 만들어짐
5. HTTP is extensible : 확장성이 좋고 테스트하기 좋은 환경을 갖추고 있음 > 새로운 기능이 쉽게 추가될 수 있음















